import{_ as u,C as c,c as p,o as r,a2 as o,b as a,j as d,w as t,a as i,G as l,a3 as s}from"./chunks/framework.C0Fyqt99.js";const L=JSON.parse('{"title":"Client léger vs Client lourd","description":"","frontmatter":{},"headers":[],"relativePath":"seances/2_client_leger_lourd.md","filePath":"seances/2_client_leger_lourd.md","lastUpdated":1756114291000}'),A={name:"seances/2_client_leger_lourd.md"};function m(g,e,C,h,v,f){const n=c("Mermaid");return r(),p("div",null,[e[5]||(e[5]=o('<h1 id="client-leger-vs-client-lourd" tabindex="-1">Client léger vs Client lourd <a class="header-anchor" href="#client-leger-vs-client-lourd" aria-label="Permalink to &quot;Client léger vs Client lourd&quot;">​</a></h1><p>Il y a deux grandes approches pour structurer une application web en fonction de la répartition des responsabilités entre le client (navigateur) et le serveur :</p><ul><li><strong>Client Léger (Thin Client)</strong> : La majorité du traitement et de la génération des vues se fait côté serveur. Le client est principalement responsable de l&#39;affichage et de la capture des interactions utilisateur.</li><li><strong>Client Lourd (Thick Client)</strong> : La majorité du traitement et de la génération des vues se fait côté client. Le serveur fournit principalement des données via des API.</li></ul><p>Nous allons présenter ici les caractéristiques, avantages et inconvénients de chaque approche.</p><h2 id="_1-client-leger-thin-client" tabindex="-1">1. Client Léger (Thin Client) <a class="header-anchor" href="#_1-client-leger-thin-client" aria-label="Permalink to &quot;1. Client Léger (Thin Client)&quot;">​</a></h2><p>Le client léger repose principalement sur le serveur pour le traitement et la génération des vues.</p><p><strong>Caractéristiques:</strong></p><ul><li>Interface utilisateur générée principalement côté serveur</li><li>Logique métier et traitement des données principalement côté serveur</li><li>Nécessite généralement un rechargement complet de la page pour les interactions</li><li>Navigation par liens hypertextes et formulaires HTML standards</li><li>État de l&#39;application géré par le serveur (sessions, cookies)</li></ul><p><strong>Exemples:</strong></p><ul><li>Sites web traditionnels (avec peu de JavaScript), comme en Web1 BA1</li><li>Applications web avec rendu côté serveur (Server-Side Rendering)</li><li>Frameworks comme Django et Ruby on Rails (rendu traditionnel)</li></ul>',10)),(r(),a(s,null,{default:t(()=>[l(n,{id:"mermaid-77",class:"mermaid",graph:"graph%20TB%0A%20%20%20%20subgraph%20%22Navigateur%20(Client%20L%C3%A9ger)%22%0A%20%20%20%20%20%20%20%20HTML%5BHTML%2FCSS%20rendu%5D%0A%20%20%20%20%20%20%20%20Minimal%5BJavaScript%20minimal%5D%0A%20%20%20%20end%0A%20%20%20%20subgraph%20%22Serveur%20Web%22%0A%20%20%20%20%20%20%20%20Logic%5BLogique%20m%C3%A9tier%5D%0A%20%20%20%20%20%20%20%20Render%5BRendu%20HTML%5D%0A%20%20%20%20%20%20%20%20Data%5BGestion%20des%20donn%C3%A9es%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20Minimal%20---%3E%20HTML%0A%20%20%20%20HTML%20---%3E%20Minimal%0A%20%20%20%20HTML%20--%3E%7CFormulaires%2FLiens%7C%20Render%0A%20%20%20%20Render%20--%3E%7CPages%20compl%C3%A8tes%7C%20HTML%0A%20%20%20%20Logic%20--%3E%7CContr%C3%B4le%7C%20Render%0A%20%20%20%20Data%20--%3E%7CFournit%7C%20Logic%0A"})]),fallback:t(()=>[...e[0]||(e[0]=[i(" Loading... ",-1)])]),_:1})),e[6]||(e[6]=d("h4",{id:"client-leger-cycle-de-vie-d-une-requete",tabindex:"-1"},[i("Client Léger : Cycle de vie d'une requête "),d("a",{class:"header-anchor",href:"#client-leger-cycle-de-vie-d-une-requete","aria-label":`Permalink to "Client Léger : Cycle de vie d'une requête"`},"​")],-1)),(r(),a(s,null,{default:t(()=>[l(n,{id:"mermaid-81",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20U%20as%20Utilisateur%0A%20%20%20%20participant%20B%20as%20Navigateur%0A%20%20%20%20participant%20S%20as%20Serveur%20Web%0A%20%20%20%20participant%20D%20as%20Base%20de%20donn%C3%A9es%0A%20%20%20%20%0A%20%20%20%20U-%3E%3EB%3A%201.%20Clique%20sur%20un%20lien%2Fbouton%0A%20%20%20%20B-%3E%3ES%3A%202.%20Requ%C3%AAte%20HTTP%20avec%20donn%C3%A9es%20du%20formulaire%0A%20%20%20%20S-%3E%3ED%3A%203.%20Requ%C3%AAtes%20de%20donn%C3%A9es%0A%20%20%20%20D-%3E%3ES%3A%204.%20Retourne%20les%20donn%C3%A9es%0A%20%20%20%20Note%20over%20S%3A%205.%20Ex%C3%A9cute%20logique%20m%C3%A9tier%0A%20%20%20%20Note%20over%20S%3A%206.%20G%C3%A9n%C3%A8re%20HTML%20complet%0A%20%20%20%20S-%3E%3EB%3A%207.%20Retourne%20page%20HTML%20compl%C3%A8te%0A%20%20%20%20Note%20over%20B%3A%208.%20Abandonne%20l'ancienne%20page%0A%20%20%20%20Note%20over%20B%3A%209.%20Analyse%20et%20affiche%20la%20nouvelle%20page%0A%20%20%20%20B-%3E%3EU%3A%2010.%20Affiche%20la%20nouvelle%20interface%0A"})]),fallback:t(()=>[...e[1]||(e[1]=[i(" Loading... ",-1)])]),_:1})),e[7]||(e[7]=o('<p><strong>Points clés :</strong></p><ul><li>Chaque action requiert généralement un rechargement complet de la page</li><li>Le serveur génère l&#39;HTML complet pour chaque requête</li><li>L&#39;état de l&#39;interface est géré côté serveur</li><li>Consommation réseau plus importante (pages complètes)</li><li>Plus simple à mettre en œuvre initialement</li></ul><h3 id="_1-3-avantages-et-inconvenients-du-client-leger" tabindex="-1">1.3 Avantages et inconvénients du Client Léger <a class="header-anchor" href="#_1-3-avantages-et-inconvenients-du-client-leger" aria-label="Permalink to &quot;1.3 Avantages et inconvénients du Client Léger&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Aspect</th><th>Client Léger</th></tr></thead><tbody><tr><td>Développement</td><td>Plus simple et rapide initialement</td></tr><tr><td>Maintenance</td><td>Centralisée principalement sur le serveur</td></tr><tr><td>Performances</td><td>Dépendantes du serveur et du réseau</td></tr><tr><td>Expérience utilisateur</td><td>Moins fluide (rechargements de page)</td></tr><tr><td>SEO<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></td><td>Excellent (tout est généré côté serveur)</td></tr><tr><td>Compatibilité</td><td>Très bonne même sur navigateurs anciens</td></tr><tr><td>Sécurité</td><td>Code critique reste sur le serveur</td></tr><tr><td>Consommation réseau</td><td>Plus élevée (pages complètes)</td></tr><tr><td>Charge serveur</td><td>Plus élevée (génération HTML)</td></tr><tr><td>Complexité du déploiement</td><td>Plus simple (mise à jour centralisée)</td></tr></tbody></table><h2 id="_2-client-lourd-rich-client" tabindex="-1">2 Client Lourd (Rich Client) <a class="header-anchor" href="#_2-client-lourd-rich-client" aria-label="Permalink to &quot;2 Client Lourd (Rich Client)&quot;">​</a></h2><p>Le client lourd délègue une part importante du traitement et de la logique au navigateur, créant des interfaces utilisateur plus riches et interactives.</p><p><strong>Caractéristiques:</strong></p><ul><li>Interface utilisateur riche et interactive, construite avec JavaScript</li><li>Logique métier partiellement déplacée côté client</li><li>Mise à jour dynamique de l&#39;interface sans rechargement complet</li><li>Communication avec le serveur principalement via API (REST, GraphQL)</li><li>État temporaire maintenu côté client (state management)</li><li>Applications à page unique (SPA - Single Page Applications)</li></ul><p><strong>Exemples:</strong></p><ul><li>Applications web modernes développées avec React, Vue.js, Angular</li><li>Applications mobiles web (PWA - Progressive Web Apps)</li><li>Dashboards interactifs</li></ul>',10)),(r(),a(s,null,{default:t(()=>[l(n,{id:"mermaid-270",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20subgraph%20%22Navigateur%20(Client%20Lourd)%22%0A%20%20%20%20%20%20%20%20UI%5BInterface%20utilisateur%5D%0A%20%20%20%20%20%20%20%20State%5B%C3%89tat%20local%5D%0A%20%20%20%20%20%20%20%20ClientLogic%5BLogique%20c%C3%B4t%C3%A9%20client%5D%0A%20%20%20%20%20%20%20%20Router%5BRouter%20c%C3%B4t%C3%A9%20client%5D%0A%20%20%20%20end%0A%20%20%20%20subgraph%20%22Serveur%20Web%20(API)%22%0A%20%20%20%20%20%20%20%20API%5BAPI%20RESTful%2FGraphQL%5D%0A%20%20%20%20%20%20%20%20Auth%5BAuthentification%5D%0A%20%20%20%20%20%20%20%20ServerLogic%5BLogique%20serveur%5D%0A%20%20%20%20%20%20%20%20DB%5B(Base%20de%20donn%C3%A9es)%5D%0A%20%20%20%20end%0A%20%20%20%20%0A%20%20%20%20ClientLogic%20--%3E%7CMet%20%C3%A0%20jour%7C%20UI%0A%20%20%20%20ClientLogic%20--%3E%7CG%C3%A8re%7C%20State%0A%20%20%20%20Router%20--%3E%7CChange%20vue%20sans%20rechargement%7C%20UI%0A%20%20%20%20ClientLogic%20--%3E%7CRequ%C3%AAtes%20API%7C%20API%0A%20%20%20%20API%20--%3E%7CDonn%C3%A9es%20JSON%7C%20ClientLogic%0A%20%20%20%20ServerLogic%20--%3E%7CContr%C3%B4le%7C%20API%0A%20%20%20%20DB%20%3C--%3E%7CCRUD%7C%20ServerLogic%0A%20%20%20%20Auth%20--%3E%7CS%C3%A9curise%7C%20API%0A"})]),fallback:t(()=>[...e[2]||(e[2]=[i(" Loading... ",-1)])]),_:1})),e[8]||(e[8]=d("h3",{id:"_2-1-cycle-de-vie-d-une-requete-dans-un-client-lourd",tabindex:"-1"},[i("2.1 Cycle de vie d'une requête dans un Client Lourd "),d("a",{class:"header-anchor",href:"#_2-1-cycle-de-vie-d-une-requete-dans-un-client-lourd","aria-label":`Permalink to "2.1 Cycle de vie d'une requête dans un Client Lourd"`},"​")],-1)),(r(),a(s,null,{default:t(()=>[l(n,{id:"mermaid-274",class:"mermaid",graph:"sequenceDiagram%0A%20%20%20%20participant%20U%20as%20Utilisateur%0A%20%20%20%20participant%20B%20as%20SPA%20(Application%20%C3%A0%20Page%20Unique)%0A%20%20%20%20participant%20A%20as%20API%20Serveur%0A%20%20%20%20participant%20D%20as%20Base%20de%20donn%C3%A9es%0A%20%20%20%20%0A%20%20%20%20Note%20over%20B%3A%201.%20Chargement%20initial%20de%20l'application%0A%20%20%20%20B-%3E%3EA%3A%202.%20Requ%C3%AAte%20initiale%20(GET%20%2Fapi%2Fressources)%0A%20%20%20%20A-%3E%3ED%3A%203.%20Requ%C3%AAte%20de%20donn%C3%A9es%0A%20%20%20%20D-%3E%3EA%3A%204.%20Retourne%20donn%C3%A9es%0A%20%20%20%20A-%3E%3EB%3A%205.%20Retourne%20JSON%2FXML%0A%20%20%20%20Note%20over%20B%3A%206.%20Initialisation%20de%20l'%C3%A9tat%20local%0A%20%20%20%20Note%20over%20B%3A%207.%20Rendu%20de%20l'interface%0A%20%20%20%20%0A%20%20%20%20U-%3E%3EB%3A%208.%20Interaction%20utilisateur%20(ex%3A%20clic%20sur%20%22Modifier%22)%0A%20%20%20%20Note%20over%20B%3A%209.%20Mise%20%C3%A0%20jour%20imm%C3%A9diate%20de%20l'UI%0A%20%20%20%20B-%3E%3EA%3A%2010.%20Requ%C3%AAte%20API%20asynchrone%20(PUT%20%2Fapi%2Fressource%2Fid)%0A%20%20%20%20A-%3E%3ED%3A%2011.%20Mise%20%C3%A0%20jour%20des%20donn%C3%A9es%0A%20%20%20%20D-%3E%3EA%3A%2012.%20Confirmation%0A%20%20%20%20A-%3E%3EB%3A%2013.%20R%C3%A9ponse%20JSON%20(succ%C3%A8s%2Ferreur)%0A%20%20%20%20Note%20over%20B%3A%2014.%20Mise%20%C3%A0%20jour%20de%20l'%C3%A9tat%20local%20et%20UI%0A%20%20%20%20B-%3E%3EU%3A%2015.%20Feedback%20visuel%20(confirmation%20ou%20erreur)%0A"})]),fallback:t(()=>[...e[3]||(e[3]=[i(" Loading... ",-1)])]),_:1})),e[9]||(e[9]=o('<p><strong>Points clés :</strong></p><ul><li>Une seule page initiale chargée, ensuite mises à jour dynamiques</li><li>Communication asynchrone avec l&#39;API serveur</li><li>État maintenu côté client dans des stores/gestionnaires d&#39;état</li><li>Consommation réseau optimisée (uniquement les données nécessaires)</li><li>Expérience utilisateur plus fluide (pas de rechargement)</li><li>Développement plus complexe (gestion d&#39;état, routage client, etc.)</li></ul><h3 id="_2-2-architecture-des-applications-client-lourd" tabindex="-1">2.2. Architecture des Applications Client Lourd <a class="header-anchor" href="#_2-2-architecture-des-applications-client-lourd" aria-label="Permalink to &quot;2.2. Architecture des Applications Client Lourd&quot;">​</a></h3><p>Une application client lourd typique s&#39;organise autour de plusieurs couches :</p>',4)),(r(),a(s,null,{default:t(()=>[l(n,{id:"mermaid-316",class:"mermaid",graph:"graph%20TD%0A%20%20%20%20UI%5BInterface%20Utilisateur%5D%0A%20%20%20%20Store%5BStore%2FState%20Management%5D%0A%20%20%20%20Services%5BServices%2FAPI%20Client%5D%0A%20%20%20%20Router%5BRouter%20Client%5D%0A%20%20%20%20%0A%20%20%20%20UI%20--%3E%7CAffiche%7C%20Store%0A%20%20%20%20UI%20--%3E%7CUtilise%7C%20Router%0A%20%20%20%20UI%20--%3E%7CDispatch%7C%20Actions%0A%20%20%20%20Actions%20--%3E%7CModifie%7C%20Store%0A%20%20%20%20Actions%20--%3E%7CAppelle%7C%20Services%0A%20%20%20%20Services%20--%3E%7CRequ%C3%AAtes%7C%20API%5BAPI%20Backend%5D%0A%20%20%20%20Router%20--%3E%7CChange%7C%20UI%0A"})]),fallback:t(()=>[...e[4]||(e[4]=[i(" Loading... ",-1)])]),_:1})),e[10]||(e[10]=o('<h4 id="elements-cles" tabindex="-1">Éléments clés : <a class="header-anchor" href="#elements-cles" aria-label="Permalink to &quot;Éléments clés :&quot;">​</a></h4><ol><li><strong>Interface Utilisateur</strong> : Composants d&#39;interface qui affichent les données et gèrent les interactions utilisateur.</li><li><strong>State Management</strong> : Gestion centralisée de l&#39;état de l&#39;application (Redux, Vuex, Context API).</li><li><strong>Services</strong> : Couche d&#39;abstraction pour les appels API et les fonctionnalités partagées.</li><li><strong>Router</strong> : Gestion de la navigation et des &quot;vues&quot; sans rechargement de page.</li><li><strong>Actions/Events</strong> : Flux de données et déclencheurs d&#39;événements pour les mises à jour d&#39;état.</li></ol><h2 id="_3-comparaison-entre-client-leger-et-client-lourd" tabindex="-1">3. Comparaison entre Client Léger et Client Lourd <a class="header-anchor" href="#_3-comparaison-entre-client-leger-et-client-lourd" aria-label="Permalink to &quot;3. Comparaison entre Client Léger et Client Lourd&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Aspect</th><th>Client Léger</th><th>Client Lourd</th></tr></thead><tbody><tr><td>Développement</td><td>Plus simple et rapide initialement</td><td>Plus complexe, nécessite plus de structure</td></tr><tr><td>Maintenance</td><td>Centralisée principalement sur le serveur</td><td>Répartie entre client et serveur</td></tr><tr><td>Performances</td><td>Dépendantes du serveur et du réseau</td><td>Meilleures après chargement initial</td></tr><tr><td>Expérience utilisateur</td><td>Moins fluide (rechargements de page)</td><td>Plus réactive et immersive</td></tr><tr><td>SEO</td><td>Excellent (tout est généré côté serveur)</td><td>Problématique sans SSR/techniques spécifiques</td></tr><tr><td>Compatibilité</td><td>Très bonne même sur navigateurs anciens</td><td>Peut nécessiter des polyfills/transpilation</td></tr><tr><td>Sécurité</td><td>Code critique reste sur le serveur</td><td>Plus de code exposé côté client</td></tr><tr><td>Consommation réseau</td><td>Plus élevée (pages complètes)</td><td>Moindre après chargement initial (uniquement data)</td></tr><tr><td>Charge serveur</td><td>Plus élevée (génération HTML)</td><td>Moindre (uniquement API data)</td></tr><tr><td>Complexité du déploiement</td><td>Plus simple (mise à jour centralisée)</td><td>Plus complexe (assets client + API)</td></tr></tbody></table><h3 id="_3-1-quand-choisir-un-client-lourd" tabindex="-1">3.1 Quand choisir un Client Lourd? <a class="header-anchor" href="#_3-1-quand-choisir-un-client-lourd" aria-label="Permalink to &quot;3.1 Quand choisir un Client Lourd?&quot;">​</a></h3><p>Le client lourd est particulièrement adapté dans les situations suivantes :</p><ol><li><strong>Applications hautement interactives</strong> nécessitant des mises à jour fréquentes de l&#39;interface.</li><li><strong>Interfaces complexes</strong> avec de nombreuses interactions utilisateur et des transitions.</li><li><strong>Applications avec état</strong> où l&#39;utilisateur effectue plusieurs opérations liées.</li><li><strong>Expérience utilisateur prioritaire</strong> sur des connexions stables.</li><li><strong>Applications métier internes</strong> où le SEO n&#39;est pas une priorité.</li></ol><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>SEO : Search Engine Optimization, optimisation pour les moteurs de recherche (Google, Bing, etc.). Cela concerne donc la visibilité et le classement d&#39;un site web dans les résultats de recherche. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>',9))])}const _=u(A,[["render",m]]);export{L as __pageData,_ as default};
