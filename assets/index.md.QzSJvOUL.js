import{_ as t,c as s,o as i,a2 as o}from"./chunks/framework.DcjMSgeM.js";const g=JSON.parse(`{"title":"","description":"","frontmatter":{"layout":"home","hero":{"name":"Cours Web BA2","text":"Syllabus 2025-2026","tagline":"HELHa - Bachelor en informatique de gestion","actions":[{"theme":"brand","text":"Commencer","link":"/seances/"},{"theme":"alt","text":"GitHub","link":"https://github.com/fpluquet/web_client_serveur"}]},"features":[{"title":"Architecture Web Moderne","details":"Ma√Ætrise des concepts client-serveur, clients l√©gers vs lourds, et architectures SPA"},{"title":"Node.js et Express","details":"D√©veloppement backend avec JavaScript, serveurs web et middleware"},{"title":"APIs RESTful","details":"Conception et d√©veloppement d'APIs robustes suivant les principes REST"},{"title":"S√©curit√© et Tests","details":"S√©curisation des applications web et strat√©gies de tests compl√®tes"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":1759926374000}`),n={name:"index.md"};function r(l,e,a,c,u,d){return i(),s("div",null,[...e[0]||(e[0]=[o('<h2 id="objectifs-du-cours" tabindex="-1">Objectifs du cours <a class="header-anchor" href="#objectifs-du-cours" aria-label="Permalink to &quot;Objectifs du cours&quot;">‚Äã</a></h2><p>Ce cours complet de d√©veloppement web backend vous permettra de ma√Ætriser les technologies et concepts essentiels du d√©veloppement web moderne. √Ä la fin de ce cours, vous serez capable de :</p><ul><li><strong>Concevoir des architectures web</strong> adapt√©es aux besoins (client l√©ger/lourd)</li><li><strong>D√©velopper des applications Node.js/Express</strong> robustes et √©volutives</li><li><strong>Cr√©er des APIs RESTful</strong> respectant les standards de l&#39;industrie</li><li><strong>G√©rer les donn√©es</strong> avec diff√©rents types de bases de donn√©es</li><li><strong>S√©curiser vos applications</strong> contre les vuln√©rabilit√©s courantes</li><li><strong>Tester efficacement</strong> vos applications (tests unitaires, int√©gration, E2E)</li><li><strong>D√©velopper des PWA</strong> pour une exp√©rience utilisateur optimale</li></ul><h2 id="programme-detaille" tabindex="-1">Programme d√©taill√© <a class="header-anchor" href="#programme-detaille" aria-label="Permalink to &quot;Programme d√©taill√©&quot;">‚Äã</a></h2><h3 id="üèóÔ∏è-fondements-de-l-architecture-web" tabindex="-1">üèóÔ∏è <strong>Fondements de l&#39;Architecture Web</strong> <a class="header-anchor" href="#üèóÔ∏è-fondements-de-l-architecture-web" aria-label="Permalink to &quot;üèóÔ∏è **Fondements de l&#39;Architecture Web**&quot;">‚Äã</a></h3><p><strong>S√©ance 1 : Architecture Client-Serveur et HTTP</strong></p><ul><li>Concepts fondamentaux client-serveur</li><li>Protocole HTTP et ses m√©thodes</li><li>Communication r√©seau et mod√®les de donn√©es</li></ul><p><strong>S√©ance 2 : Client L√©ger vs Client Lourd</strong></p><ul><li>Comparaison des approches architecturales</li><li>Avantages et inconv√©nients de chaque mod√®le</li><li>Choix technologiques selon le contexte</li></ul><h3 id="üöÄ-technologies-backend" tabindex="-1">üöÄ <strong>Technologies Backend</strong> <a class="header-anchor" href="#üöÄ-technologies-backend" aria-label="Permalink to &quot;üöÄ **Technologies Backend**&quot;">‚Äã</a></h3><p><strong>S√©ance 3 : Node.js et l&#39;√âcosyst√®me npm</strong></p><ul><li>Environnement d&#39;ex√©cution JavaScript c√¥t√© serveur</li><li>Mod√®le asynchrone et √©v√©nementiel</li><li>Gestion des packages avec npm</li></ul><p><strong>S√©ance 4 : Serveurs Web avec Express.js</strong></p><ul><li>Framework Express pour Node.js</li><li>Routing et middleware</li><li>Gestion des requ√™tes et r√©ponses HTTP</li></ul><p><strong>S√©ance 5 : Architecture Client Lourd et SPA</strong></p><ul><li>Single Page Applications (SPA)</li><li>JavaScript vanilla pour applications client-lourd</li><li>Gestion de l&#39;√©tat c√¥t√© client</li></ul><h3 id="üîå-apis-et-donnees" tabindex="-1">üîå <strong>APIs et Donn√©es</strong> <a class="header-anchor" href="#üîå-apis-et-donnees" aria-label="Permalink to &quot;üîå **APIs et Donn√©es**&quot;">‚Äã</a></h3><p><strong>S√©ance 6 : APIs RESTful</strong></p><ul><li>Principes et contraintes REST</li><li>Conception d&#39;APIs robustes</li><li>Codes de statut HTTP et bonnes pratiques</li></ul><p><strong>S√©ance 7 : Gestion des Donn√©es et Bases de Donn√©es</strong></p><ul><li>Interaction avec les bases de donn√©es</li><li>Pattern MVC (Mod√®le-Vue-Contr√¥leur)</li><li>ORM/ODM et requ√™tes optimis√©es</li></ul><h3 id="üõ°Ô∏è-qualite-et-securite" tabindex="-1">üõ°Ô∏è <strong>Qualit√© et S√©curit√©</strong> <a class="header-anchor" href="#üõ°Ô∏è-qualite-et-securite" aria-label="Permalink to &quot;üõ°Ô∏è **Qualit√© et S√©curit√©**&quot;">‚Äã</a></h3><p><strong>S√©ance 8 : Tests et Qualit√© du Code</strong></p><ul><li>Strat√©gies de test (unitaires, int√©gration, E2E)</li><li>Pyramide des tests</li><li>Outils de test pour Node.js</li></ul><p><strong>S√©ance 9 : S√©curit√© des Applications Web</strong></p><ul><li>Vuln√©rabilit√©s courantes (OWASP Top 10)</li><li>Authentification et autorisation</li><li>S√©curisation des APIs</li></ul><h3 id="üåê-technologies-avancees" tabindex="-1">üåê <strong>Technologies Avanc√©es</strong> <a class="header-anchor" href="#üåê-technologies-avancees" aria-label="Permalink to &quot;üåê **Technologies Avanc√©es**&quot;">‚Äã</a></h3><p><strong>S√©ance 10 : Progressive Web Apps (PWA)</strong></p><ul><li>Concepts et caract√©ristiques des PWA</li><li>Service Workers et cache</li><li>Exp√©rience utilisateur native sur le web</li></ul><p><strong>S√©ance 11 : Conclusion et Perspectives</strong></p><ul><li>Synth√®se des comp√©tences acquises</li><li>Tendances et √©volutions du d√©veloppement web</li><li>Pr√©paration aux projets professionnels</li></ul><h2 id="structure-pedagogique" tabindex="-1">Structure p√©dagogique <a class="header-anchor" href="#structure-pedagogique" aria-label="Permalink to &quot;Structure p√©dagogique&quot;">‚Äã</a></h2><p>Chaque s√©ance suit une approche progressive structur√©e en trois parties :</p><ol><li><strong>üéì Th√©orie</strong> : Concepts fondamentaux et principes th√©oriques</li><li><strong>üíª Application</strong> : Exemples pratiques en Node.js/Express (et PHP en compl√©ment)</li><li><strong>üîß Exercices</strong> : Travaux pratiques avec solutions d√©taill√©es pour consolider les acquis</li></ol><h2 id="competences-transversales-developpees" tabindex="-1">Comp√©tences transversales d√©velopp√©es <a class="header-anchor" href="#competences-transversales-developpees" aria-label="Permalink to &quot;Comp√©tences transversales d√©velopp√©es&quot;">‚Äã</a></h2><ul><li><strong>Pens√©e architecturale</strong> : Capacit√© √† concevoir des syst√®mes √©volutifs</li><li><strong>R√©solution de probl√®mes</strong> : Debugging et optimisation d&#39;applications</li><li><strong>S√©curit√©</strong> : D√©veloppement s√©curis√© par design</li><li><strong>Collaboration</strong> : Utilisation d&#39;outils de d√©veloppement collaboratif</li><li><strong>Veille technologique</strong> : Adaptation aux √©volutions rapides du web</li></ul>',36)])])}const h=t(n,[["render",r]]);export{g as __pageData,h as default};
